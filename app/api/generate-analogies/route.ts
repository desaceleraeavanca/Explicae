import { generateText } from "@/lib/openrouter"

export async function POST(request: Request) {
  console.log("[DEBUG] Iniciando gera√ß√£o de analogias...")
  
  try {
    console.log("[DEBUG] Fazendo parse do JSON da requisi√ß√£o...")
    const { concept, audience } = await request.json()
    console.log("[DEBUG] Dados recebidos:", { concept, audience })

    if (!concept || !audience) {
      console.log("[DEBUG] Erro: Conceito ou p√∫blico-alvo n√£o fornecidos")
      return Response.json({ error: "Conceito e p√∫blico-alvo s√£o obrigat√≥rios" }, { status: 400 })
    }

    // Modelo padr√£o para todos os usu√°rios
    const model = "openai/gpt-4o-mini"

    // Constru√ß√£o do prompt para o modelo de IA
    const systemPrompt = `Voc√™ √© um assistente criativo especialista em comunica√ß√£o clara e impactante. 
 
Sua miss√£o √© gerar analogias √∫nicas, criativas e adaptadas para explicar qualquer conceito de forma simples, visual e memor√°vel ‚Äî usando refer√™ncias que fa√ßam sentido para o p√∫blico-alvo especificado. 
 
--- 
 
üéØ TAREFA: 
Crie 3 analogias diferentes para o conceito abaixo, adaptadas para o universo, linguagem e refer√™ncias do p√∫blico indicado. 
 
--- 
 
üìå REGRAS: 
1. Cada analogia deve ter uma l√≥gica diferente (ex: compara√ß√£o com objeto, rotina, tecnologia, natureza, etc.) 
2. Adapte totalmente ao p√∫blico ‚Äî use o vocabul√°rio, refer√™ncias culturais e met√°foras que essa pessoa reconheceria e entenderia. 
3. Tente incluir uma mini-hist√≥ria ou imagem visual clara em pelo menos uma das analogias. 
4. Uma das analogias pode (e deve) ter um toque de humor, surpresa ou m√°gica. 
5. Sempre que poss√≠vel, deixe claro o benef√≠cio ou o que o conceito resolve. 
6. **Seja direto e conciso. Evite introdu√ß√µes desnecess√°rias ou explica√ß√µes excessivamente longas.** 
7. **Se o p√∫blico-alvo for vago (ex: 'adultos'), assuma um perfil de adulto curioso, sem conhecimento t√©cnico, e use refer√™ncias do cotidiano.** 
8. Responda APENAS com um JSON contendo uma lista chamada \`"analogias"\` ‚Äî cada item deve ser uma string com uma analogia completa. 
 
--- 
 
üß© EXEMPLOS: 
 
**Conceito:** Blockchain   
**P√∫blico-alvo:** Tiktoker de 16 anos   
 
\`\`\`json 
{ 
  "analogias": [ 
    "Blockchain √© tipo aquele grupo do WhatsApp onde todo mundo v√™ a mesma mensagem e ningu√©m pode apagar o que j√° foi enviado ‚Äî todo mundo confia porque n√£o d√° pra mudar o que t√° l√°.", 
    "Imagina um di√°rio gigante que v√°rias pessoas escrevem juntas, mas s√≥ adicionam p√°ginas novas e ningu√©m pode rasgar ou trocar as antigas. Esse di√°rio √© o blockchain: super seguro e transparente!", 
    "Pensa no blockchain como um TikTok viral que todo mundo copia certinho, ent√£o n√£o tem como inventar uma vers√£o falsa porque todo mundo tem a original guardada." 
  ] 
} 
\`\`\``

    const userPrompt = `Conceito a explicar: ${concept}\nP√∫blico-alvo: ${audience}`

    console.log("[DEBUG] Gerando analogias com o modelo:", model)
    console.log("[DEBUG] System prompt:", systemPrompt)
    console.log("[DEBUG] User prompt:", userPrompt)

    try {
      // Gera o texto com o modelo selecionado
      const response = await generateText(
        [
          {
            role: 'system',
            content: systemPrompt,
          },
          {
            role: 'user',
            content: userPrompt,
          },
        ],
        model
      )

      console.log('[DEBUG] Response from AI:', response)

      // Tenta extrair o JSON da resposta
      let analogies: any[] = []
      
      try {
        // Tenta encontrar um objeto JSON na resposta usando regex
        const jsonMatch = response.match(/\{[\s\S]*\}/)
        if (jsonMatch) {
          const jsonStr = jsonMatch[0]
          const parsed = JSON.parse(jsonStr)
          
          if (parsed.analogies && Array.isArray(parsed.analogies)) {
            analogies = parsed.analogies
          } else if (parsed.analogias && Array.isArray(parsed.analogias)) {
            // Suporta resposta em portugu√™s conforme instru√ß√£o do prompt
            analogies = parsed.analogias
          } else if (Array.isArray(parsed)) {
            analogies = parsed
          } else {
            // Se n√£o encontrou o formato esperado, usa analogias de fallback
            analogies = [
              {
                title: "Analogia Simples",
                description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
              },
              {
                title: "Analogia Alternativa",
                description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
              },
              {
                title: "Analogia Pr√°tica",
                description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
              }
            ]
          }
        } else {
          // Se n√£o encontrou JSON, usa analogias de fallback
          analogies = [
            {
              title: "Analogia Simples",
              description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
            },
            {
              title: "Analogia Alternativa",
              description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
            },
            {
              title: "Analogia Pr√°tica",
              description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
            }
          ]
        }
      } catch (parseError) {
        console.error('[DEBUG] Error parsing AI response:', parseError)
        // Se falhou ao analisar o JSON, usa analogias de fallback
        analogies = [
          {
            title: "Analogia Simples",
            description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
          },
          {
            title: "Analogia Alternativa",
            description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
          },
          {
            title: "Analogia Pr√°tica",
            description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
          }
        ]
      }

      // Normaliza para objetos { title, description }
      const normalized = analogies.map((item: any, idx: number) => {
        if (typeof item === 'string') {
          return { title: `Analogia ${idx + 1}`, description: item }
        }
        if (item && typeof item === 'object') {
          const description =
            item.description ||
            item.descricao ||
            item["descri√ß√£o"] ||
            item.explicacao ||
            item["explica√ß√£o"] ||
            item.text ||
            item.analogy ||
            item.conteudo ||
            item.content ||
            ''

          const title =
            item.title ||
            item.titulo ||
            item["t√≠tulo"] ||
            `Analogia ${idx + 1}`

          return { title, description }
        }
        return { title: `Analogia ${idx + 1}`, description: String(item) }
      })

      console.log('[DEBUG] Analogias normalizadas:', normalized)
      return Response.json({ analogies: normalized })
    } catch (error) {
      console.error('[DEBUG] Error in generate-analogies:', error)
      console.error("[DEBUG] Stack trace:", error.stack)
      console.error("[v0] Error in generate-analogies:", error)
      
      // Tratamento espec√≠fico para erro "Not Found" do OpenRouter
      if (error instanceof Error && error.message.includes('Not Found')) {
        return Response.json(
          { 
            error: 'Servi√ßo de IA temporariamente indispon√≠vel. Por favor, tente novamente em alguns instantes.',
            details: 'O servi√ßo OpenRouter est√° temporariamente indispon√≠vel.'
          },
          { status: 503 }
        )
      }
      
      // Retorna analogias de fallback em caso de erro
      return Response.json({ 
        analogies: [
          {
            title: "Analogia de Conting√™ncia 1",
            description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
          },
          {
            title: "Analogia de Conting√™ncia 2",
            description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
          },
          {
            title: "Analogia de Conting√™ncia 3",
            description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
          }
        ]
      })
    }
  } catch (error) {
    console.error('[DEBUG] Error in generate-analogies outer try-catch:', error)
    console.error("[DEBUG] Stack trace:", error.stack)
    
    // Retorna analogias de fallback em caso de erro
    return Response.json({ 
      analogies: [
        {
          title: "Analogia de Emerg√™ncia 1",
          description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
        },
        {
          title: "Analogia de Emerg√™ncia 2",
          description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
        },
        {
          title: "Analogia de Emerg√™ncia 3",
          description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
        }
      ]
    })
  }
}
