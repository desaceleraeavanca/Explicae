import { cookies } from "next/headers"
import { generateText, getModelForUser, getOpenRouterConfig } from "@/lib/openrouter"
import { createClient } from "@/lib/supabase/server"
import { checkAnonymousAccess, checkUserAccess, trackGeneration, consumeCredit, getAnonymousId } from "@/lib/access-control"

export async function POST(request: Request) {
  console.log("[DEBUG] Iniciando gera√ß√£o de analogias...")
  
  // Flag para controlar se a gera√ß√£o j√° foi registrada
  let generationRegistered = false;
  
  try {
    console.log("[DEBUG] Fazendo parse do JSON da requisi√ß√£o...")
    const { concept, audience } = await request.json()
    console.log("[DEBUG] Dados recebidos:", { concept, audience })

    if (!concept || !audience) {
      console.log("[DEBUG] Erro: Conceito ou p√∫blico-alvo n√£o fornecidos")
      return Response.json({ error: "Conceito e p√∫blico-alvo s√£o obrigat√≥rios" }, { status: 400 })
    }

    // Determina o modelo com base no plano do usu√°rio ou fallback do sistema
    let model: string | undefined
    const config = await getOpenRouterConfig()
    
    try {
      const supabase = await createClient()
      const {
        data: { user },
      } = await supabase.auth.getUser()

      if (user?.id) {
        model = await getModelForUser(user.id)
      } else {
        model = config.fallback_model
      }
    } catch (e) {
      console.error("[DEBUG] Erro ao obter usu√°rio ou modelo:", e)
      model = config.fallback_model
    }

    // Constru√ß√£o do prompt para o modelo de IA
    const systemPrompt = `Voc√™ √© um assistente criativo especialista em comunica√ß√£o clara e impactante. 
 
Sua miss√£o √© gerar analogias √∫nicas, criativas e adaptadas para explicar qualquer conceito de forma simples, visual e memor√°vel ‚Äî usando refer√™ncias que fa√ßam sentido para o p√∫blico-alvo especificado. 
 
--- 
 
üéØ TAREFA: 
Crie 3 analogias diferentes para o conceito abaixo, adaptadas para o universo, linguagem e refer√™ncias do p√∫blico indicado. 
 
--- 
 
üìå REGRAS: 
1. Cada analogia deve ter uma l√≥gica diferente (ex: compara√ß√£o com objeto, rotina, tecnologia, natureza, etc.) 
2. Adapte totalmente ao p√∫blico ‚Äî use o vocabul√°rio, refer√™ncias culturais e met√°foras que essa pessoa reconheceria e entenderia. 
3. Tente incluir uma mini-hist√≥ria ou imagem visual clara em pelo menos uma das analogias. 
4. Uma das analogias pode (e deve) ter um toque de humor, surpresa ou m√°gica. 
5. Sempre que poss√≠vel, deixe claro o benef√≠cio ou o que o conceito resolve. 
6. **Seja direto e conciso. Evite introdu√ß√µes desnecess√°rias ou explica√ß√µes excessivamente longas.** 
7. **Se o p√∫blico-alvo for vago (ex: 'adultos'), assuma um perfil de adulto curioso, sem conhecimento t√©cnico, e use refer√™ncias do cotidiano.** 
8. Responda APENAS com um JSON contendo uma lista chamada \`"analogias"\` ‚Äî cada item deve ter um t√≠tulo e uma descri√ß√£o. 
 
--- 
 
üß© EXEMPLO DE RESPOSTA: 
 
\`\`\`json 
{ 
  "analogias": [ 
    {
      "titulo": "Di√°rio Digital Inviol√°vel",
      "descricao": "Blockchain √© tipo aquele grupo do WhatsApp onde todo mundo v√™ a mesma mensagem e ningu√©m pode apagar o que j√° foi enviado ‚Äî todo mundo confia porque n√£o d√° pra mudar o que t√° l√°."
    },
    {
      "titulo": "Livro de Assinaturas P√∫blico",
      "descricao": "Imagina um di√°rio gigante que v√°rias pessoas escrevem juntas, mas s√≥ adicionam p√°ginas novas e ningu√©m pode rasgar ou trocar as antigas. Esse di√°rio √© o blockchain: super seguro e transparente!"
    },
    {
      "titulo": "Viral Imposs√≠vel de Falsificar",
      "descricao": "Pensa no blockchain como um TikTok viral que todo mundo copia certinho, ent√£o n√£o tem como inventar uma vers√£o falsa porque todo mundo tem a original guardada."
    }
  ] 
} 
\`\`\``

    const userPrompt = `Conceito a explicar: ${concept}\nP√∫blico-alvo: ${audience}`

    console.log("[DEBUG] Gerando analogias com o modelo:", model)
    console.log("[DEBUG] System prompt:", systemPrompt)
    console.log("[DEBUG] User prompt:", userPrompt)

    try {
      // Checar acesso (plano/cr√©ditos/fair use) apenas para usu√°rios logados
      const supabaseAccess = await createClient()
      const { data: { user: accessUser } } = await supabaseAccess.auth.getUser()

      let usageInfo: { used: number; limit: number; remaining: number } | null = null
      let canGenerate = true
      let denyReason = "ok"

      if (accessUser?.id) {
        const access = await checkUserAccess(accessUser.id)
        canGenerate = access.canGenerate
        denyReason = access.reason
        usageInfo = {
          used: access.generationsUsed,
          limit: access.generationsLimit,
          remaining: Math.max(0, access.generationsLimit - access.generationsUsed),
        }
        
        if (!canGenerate) {
          const upgradeMessage = denyReason === "fair_use_limit"
            ? "Voc√™ atingiu o limite de fair use deste m√™s."
            : denyReason === "no_credits"
              ? "Voc√™ n√£o possui cr√©ditos dispon√≠veis."
              : denyReason === "credits_expired"
                ? "Seus cr√©ditos expiraram."
                : denyReason === "limit_reached"
                  ? "Voc√™ atingiu seu limite atual."
                  : "Limite atingido. Considere fazer upgrade."

          return Response.json({
            error: "Rate limit",
            message: upgradeMessage,
            title: "Limite atingido",
            buttonText: "Fazer upgrade",
            buttonLink: "/assinatura",
            usage: usageInfo || { used: 0, limit: 0, remaining: 0 },
          }, { status: 403 })
        }
      }

      // Gera o texto com o modelo selecionado
      const response = await generateText(
        [
          {
            role: 'system',
            content: systemPrompt,
          },
          {
            role: 'user',
            content: userPrompt,
          },
        ],
        model
      )

      console.log('[DEBUG] Response from AI:', response.substring(0, 200) + '...')

      // Analogias de fallback para caso de erro
      const fallbackAnalogies = [
        {
          title: "Analogia Simples",
          description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
        },
        {
          title: "Analogia Alternativa",
          description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
        },
        {
          title: "Analogia Pr√°tica",
          description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
        }
      ]
      
      // Tenta extrair o JSON da resposta
      let analogies = fallbackAnalogies
      
      try {
        // Tenta encontrar um objeto JSON na resposta usando regex
        const jsonMatch = response.match(/\{[\s\S]*\}/)
        if (jsonMatch) {
          const jsonStr = jsonMatch[0]
          console.log('[DEBUG] JSON encontrado na resposta:', jsonStr.substring(0, 200) + '...')
          
          const parsed = JSON.parse(jsonStr)
          
          if (parsed.analogias && Array.isArray(parsed.analogias)) {
            analogies = parsed.analogias
          } else if (parsed.analogias && Array.isArray(parsed.analogias)) {
            analogies = parsed.analogias
          } else if (Array.isArray(parsed)) {
            analogies = parsed
          }
        }
      } catch (parseError) {
        console.error('[DEBUG] Error parsing AI response:', parseError)
      }

      // Registra a gera√ß√£o no banco de dados
      try {
        if (!generationRegistered) {
          const supabaseTrack = await createClient()
          const { data: { user: trackUser } } = await supabaseTrack.auth.getUser()
          
          if (trackUser?.id) {
            // Usu√°rio logado
            console.log('[DEBUG] Registrando gera√ß√£o para usu√°rio:', trackUser.id)
            
            // Registra a gera√ß√£o
            const now = new Date().toISOString()
            const { error: trackError } = await supabaseTrack
              .from('generations')
              .insert({
                user_id: trackUser.id,
                concept: concept,
                audience: audience,
                created_at: now,
                updated_at: now
              })
            
            if (trackError) {
              console.error('[DEBUG] Erro ao registrar gera√ß√£o:', trackError)
              // Fallback para trackGeneration
              await trackGeneration(trackUser.id, concept, audience)
            }
            
            // Atualiza o uso do usu√°rio
            try {
              // Incrementa o uso do usu√°rio
              const { error: usageError } = await supabaseTrack.rpc('increment_user_usage', {
                user_id_param: trackUser.id
              })
              
              if (usageError) {
                console.error('[DEBUG] Erro ao incrementar uso do usu√°rio:', usageError)
                
                // Recalcula o uso final
                if (usageInfo) {
                  usageInfo.used += 1
                  usageInfo.remaining = Math.max(0, usageInfo.limit - usageInfo.used)
                }
              }
            } catch (usageUpdateError) {
              console.error('[DEBUG] Erro ao atualizar uso:', usageUpdateError)
            }
            
            // Marca que a gera√ß√£o foi registrada
            generationRegistered = true
          }
        }
      } catch (trackError) {
        console.error('[DEBUG] Erro ao registrar gera√ß√£o:', trackError)
      }

      // Retorna as analogias geradas
      return Response.json({
        analogies,
        usage: usageInfo || { used: 0, limit: 0, remaining: 0 },
      })
    } catch (aiError) {
      console.error('[DEBUG] Error generating analogies:', aiError)
      return Response.json({
        error: "Erro ao gerar analogias",
        message: "Ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente.",
      }, { status: 500 })
    }
  } catch (error) {
    console.error('[DEBUG] Unexpected error:', error)
    return Response.json({
      error: "Erro inesperado",
      message: "Ocorreu um erro inesperado. Por favor, tente novamente.",
    }, { status: 500 })
  }
}
