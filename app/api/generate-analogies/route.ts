import {
  checkAnonymousAccess,
  checkUserAccess,
  trackGeneration,
  consumeCredit,
  getAnonymousId,
} from "@/lib/access-control"
import { getModelForUser, generateText, OpenRouterMessage } from "@/lib/openrouter"
import { createClient } from "@/lib/supabase/server"
import { cookies } from "next/headers"

export async function POST(request: Request) {
  console.log("[DEBUG] Iniciando gera√ß√£o de analogias...")
  
  try {
    console.log("[DEBUG] Fazendo parse do JSON da requisi√ß√£o...")
    const { concept, audience } = await request.json()
    console.log("[DEBUG] Dados recebidos:", { concept, audience })

    if (!concept || !audience) {
      console.log("[DEBUG] Erro: Conceito ou p√∫blico-alvo n√£o fornecidos")
      return Response.json({ error: "Conceito e p√∫blico-alvo s√£o obrigat√≥rios" }, { status: 400 })
    }

    console.log("[DEBUG] Criando cliente Supabase...")
    const supabase = await createClient()
    console.log("[DEBUG] Cliente Supabase criado com sucesso")
    
    console.log("[DEBUG] Obtendo usu√°rio...")
    const {
      data: { user },
    } = await supabase.auth.getUser()
    console.log("[DEBUG] Usu√°rio:", user ? `ID: ${user.id}` : "An√¥nimo")

    let accessCheck
    let modelToUse = "openai/gpt-4o-mini" // Default for anonymous users

    if (!user) {
      console.log("[DEBUG] Processando usu√°rio an√¥nimo...")
      const anonymousId = getAnonymousId()
      console.log("[DEBUG] ID an√¥nimo:", anonymousId)
      accessCheck = await checkAnonymousAccess(anonymousId)
      console.log("[DEBUG] Verifica√ß√£o de acesso an√¥nimo:", accessCheck)

      if (!accessCheck.canGenerate) {
        console.log("[DEBUG] Limite de gera√ß√µes atingido para usu√°rio an√¥nimo")
        return Response.json(
          {
            error: "limit_reached",
            message: "Voc√™ atingiu o limite de gera√ß√µes gratuitas. Cadastre-se para continuar!",
            redirectTo: "/auth/signup",
          },
          { status: 403 },
        )
      }

      // Set cookie for anonymous tracking
      console.log("[DEBUG] Definindo cookie para usu√°rio an√¥nimo...")
      const cookieStore = cookies()
      cookieStore.set("anonymous_id", anonymousId, {
        maxAge: 60 * 60 * 24 * 365, // 1 year
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
      })

      // Track generation
      console.log("[DEBUG] Rastreando gera√ß√£o para usu√°rio an√¥nimo...")
      await trackGeneration(null, anonymousId, concept, audience)
      console.log("[DEBUG] Gera√ß√£o rastreada com sucesso")
    } else {
      console.log("[DEBUG] Processando usu√°rio autenticado...")
      accessCheck = await checkUserAccess(user.id)
      console.log("[DEBUG] Verifica√ß√£o de acesso do usu√°rio:", accessCheck)

      if (!accessCheck.canGenerate) {
        let message = "Voc√™ atingiu o limite do seu plano."
        const redirectTo = "/pricing"

        if (accessCheck.reason === "trial_expired") {
          message = "Seu per√≠odo de teste expirou. Fa√ßa upgrade para continuar!"
        } else if (accessCheck.reason === "limit_reached") {
          message = "Voc√™ atingiu o limite de 100 gera√ß√µes do plano gratuito. Fa√ßa upgrade!"
        } else if (accessCheck.reason === "no_credits") {
          message = "Seus cr√©ditos acabaram. Recarregue para continuar!"
        } else if (accessCheck.reason === "subscription_cancelled") {
          message = "Sua assinatura foi cancelada. Renove para continuar!"
        } else if (accessCheck.reason === "payment_pending") {
          message = "Seu pagamento est√° pendente. Regularize para continuar!"
        }

        return Response.json(
          {
            error: accessCheck.reason,
            message,
            redirectTo,
            usage: {
              used: accessCheck.generationsUsed,
              limit: accessCheck.generationsLimit,
            },
          },
          { status: 403 },
        )
      }

      console.log("[DEBUG] Obtendo modelo para usu√°rio...")
      modelToUse = await getModelForUser(user.id)
      console.log("[DEBUG] Modelo obtido:", modelToUse)

      // Track generation
      console.log("[DEBUG] Rastreando gera√ß√£o para usu√°rio autenticado...")
      await trackGeneration(user.id, null, concept, audience)
      console.log("[DEBUG] Gera√ß√£o rastreada com sucesso")

      // Consume credit if applicable
      if (accessCheck.reason === "ok") {
        console.log("[DEBUG] Consumindo cr√©dito...")
        await consumeCredit(user.id)
        console.log("[DEBUG] Cr√©dito consumido com sucesso")
      }
    }

    console.log("[DEBUG] Preparando mensagens para OpenRouter...")
    const messages: OpenRouterMessage[] = [
      {
        role: 'system',
        content: `Voc√™ √© um assistente criativo especialista em comunica√ß√£o clara e impactante. 
 
Sua miss√£o √© gerar analogias √∫nicas, criativas e adaptadas para explicar qualquer conceito de forma simples, visual e memor√°vel ‚Äî usando refer√™ncias que fa√ßam sentido para o p√∫blico-alvo especificado. 

üìå REGRAS: 
1. Cada analogia deve ter uma l√≥gica diferente (ex: compara√ß√£o com objeto, rotina, tecnologia, natureza, etc.) 
2. Adapte totalmente ao p√∫blico ‚Äî use o vocabul√°rio, refer√™ncias culturais e met√°foras que essa pessoa reconheceria e entenderia. 
3. Tente incluir uma mini-hist√≥ria ou imagem visual clara em pelo menos uma das analogias. 
4. Uma das analogias pode (e deve) ter um toque de humor, surpresa ou m√°gica. 
5. Sempre que poss√≠vel, deixe claro o benef√≠cio ou o que o conceito resolve. 
6. **Seja direto e conciso. Evite introdu√ß√µes desnecess√°rias ou explica√ß√µes excessivamente longas.** 
7. **Se o p√∫blico-alvo for vago (ex: 'adultos'), assuma um perfil de adulto curioso, sem conhecimento t√©cnico, e use refer√™ncias do cotidiano.** 
8. Responda APENAS com um JSON contendo uma lista chamada "analogias" ‚Äî cada item deve ser uma string com uma analogia completa. 

Formato de resposta (JSON):
{
  "analogias": [
    "Analogia 1 completa em texto",
    "Analogia 2 completa em texto",
    "Analogia 3 completa em texto"
  ]
}`
      },
      {
        role: 'user',
        content: `Crie 3 analogias diferentes para o conceito "${concept}", adaptadas para o universo, linguagem e refer√™ncias do p√∫blico "${audience}".`
      }
    ]

    console.log("[DEBUG] Mensagens preparadas com sucesso")
    console.log(`[DEBUG] Usando o modelo: ${modelToUse}`)
    console.log("[DEBUG] Chamando generateText...")

    const text = await generateText(messages, modelToUse, 1000)

    console.log("[DEBUG] Texto gerado pela IA:", text)
    console.log("[DEBUG] Tamanho do texto gerado:", text.length)

    console.log("[v0] Generated text with model:", modelToUse)

    // Parse the JSON response
    try {
      console.log("[DEBUG] Tentando fazer parse do JSON...")
      // Tenta encontrar o JSON na resposta
      const jsonMatch = text.match(/\{[\s\S]*\}/)
      if (!jsonMatch) {
        console.error("[DEBUG] Nenhum JSON encontrado na resposta")
        throw new Error("Invalid response format")
      }

      console.log("[DEBUG] JSON encontrado:", jsonMatch[0])
      const result = JSON.parse(jsonMatch[0])
      console.log("[DEBUG] JSON parseado com sucesso:", result)
      
      // Verifica se o resultado tem a estrutura esperada com qualquer uma das chaves
      const analogies = result.analogias || result.analogies || []
      console.log("[DEBUG] Analogias extra√≠das:", analogies)
      
      if (!analogies || !Array.isArray(analogies)) {
        console.error("[DEBUG] Estrutura de analogias inv√°lida")
        throw new Error("Invalid analogias structure")
      }
      
      console.log("[DEBUG] Retornando resposta de sucesso")
      return Response.json({
        analogies: analogies,
        usage: {
          used: accessCheck.generationsUsed + 1,
          limit: accessCheck.generationsLimit,
          remaining: accessCheck.generationsLimit - accessCheck.generationsUsed - 1,
        },
      })
    } catch (jsonError) {
      console.error("[DEBUG] Erro no parse do JSON:", jsonError)
      console.error("[v0] Error parsing JSON:", jsonError, "Raw text:", text)
      
      // Fallback: Tenta criar uma estrutura de analogias a partir do texto bruto
      console.log("[DEBUG] Tentando fallback...")
      const fallbackAnalogies = []
      const sections = text.split(/\n\n+/)
      
      for (let i = 0; i < sections.length && fallbackAnalogies.length < 3; i++) {
        const section = sections[i].trim()
        if (section && section.length > 10) {
          fallbackAnalogies.push(section)
        }
      }
      
      console.log("[DEBUG] Analogias do fallback:", fallbackAnalogies)
      
      if (fallbackAnalogies.length > 0) {
        console.log("[DEBUG] Retornando resposta de fallback")
        return Response.json({
          analogies: fallbackAnalogies,
          usage: {
            used: accessCheck.generationsUsed + 1,
            limit: accessCheck.generationsLimit,
            remaining: accessCheck.generationsLimit - accessCheck.generationsUsed - 1,
          },
        })
      }
      
      console.error("[DEBUG] Fallback tamb√©m falhou")
      throw new Error("Failed to parse response and create fallback")
    }
    
  } catch (error) {
    console.error("[DEBUG] Erro detalhado no catch principal:", error)
    console.error("[DEBUG] Nome do erro:", error.name)
    console.error("[DEBUG] Mensagem do erro:", error.message)
    console.error("[DEBUG] Stack trace:", error.stack)
    console.error("[v0] Error in generate-analogies:", error)
    return Response.json({ error: "Erro ao gerar analogias" }, { status: 500 })
  }
}
