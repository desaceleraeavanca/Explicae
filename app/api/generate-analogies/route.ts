import { cookies } from "next/headers"
import { generateText, getModelForUser, getOpenRouterConfig } from "@/lib/openrouter"
import { createClient } from "@/lib/supabase/server"
import { checkAnonymousAccess, checkUserAccess, trackGeneration, consumeCredit, getAnonymousId } from "@/lib/access-control"

export async function POST(request: Request) {
  console.log("[DEBUG] Iniciando gera√ß√£o de analogias...")
  
  try {
    console.log("[DEBUG] Fazendo parse do JSON da requisi√ß√£o...")
    const { concept, audience } = await request.json()
    console.log("[DEBUG] Dados recebidos:", { concept, audience })

    if (!concept || !audience) {
      console.log("[DEBUG] Erro: Conceito ou p√∫blico-alvo n√£o fornecidos")
      return Response.json({ error: "Conceito e p√∫blico-alvo s√£o obrigat√≥rios" }, { status: 400 })
    }

    // Determina o modelo com base no plano do usu√°rio ou fallback do sistema
    let model: string | undefined
    const config = await getOpenRouterConfig()
    
    try {
      const supabase = await createClient()
      const {
        data: { user },
      } = await supabase.auth.getUser()

      if (user?.id) {
        model = await getModelForUser(user.id)
      } else {
        model = config.fallback_model
      }
    } catch (e) {
      console.error("[DEBUG] Erro ao obter usu√°rio ou modelo:", e)
      model = config.fallback_model
    }

    // Constru√ß√£o do prompt para o modelo de IA
    const systemPrompt = `Voc√™ √© um assistente criativo especialista em comunica√ß√£o clara e impactante. 
 
Sua miss√£o √© gerar analogias √∫nicas, criativas e adaptadas para explicar qualquer conceito de forma simples, visual e memor√°vel ‚Äî usando refer√™ncias que fa√ßam sentido para o p√∫blico-alvo especificado. 
 
--- 
 
üéØ TAREFA: 
Crie 3 analogias diferentes para o conceito abaixo, adaptadas para o universo, linguagem e refer√™ncias do p√∫blico indicado. 
 
--- 
 
üìå REGRAS: 
1. Cada analogia deve ter uma l√≥gica diferente (ex: compara√ß√£o com objeto, rotina, tecnologia, natureza, etc.) 
2. Adapte totalmente ao p√∫blico ‚Äî use o vocabul√°rio, refer√™ncias culturais e met√°foras que essa pessoa reconheceria e entenderia. 
3. Tente incluir uma mini-hist√≥ria ou imagem visual clara em pelo menos uma das analogias. 
4. Uma das analogias pode (e deve) ter um toque de humor, surpresa ou m√°gica. 
5. Sempre que poss√≠vel, deixe claro o benef√≠cio ou o que o conceito resolve. 
6. **Seja direto e conciso. Evite introdu√ß√µes desnecess√°rias ou explica√ß√µes excessivamente longas.** 
7. **Se o p√∫blico-alvo for vago (ex: 'adultos'), assuma um perfil de adulto curioso, sem conhecimento t√©cnico, e use refer√™ncias do cotidiano.** 
8. Responda APENAS com um JSON contendo uma lista chamada \`"analogias"\` ‚Äî cada item deve ter um t√≠tulo e uma descri√ß√£o. 
 
--- 
 
üß© EXEMPLO DE RESPOSTA: 
 
\`\`\`json 
{ 
  "analogias": [ 
    {
      "titulo": "Di√°rio Digital Inviol√°vel",
      "descricao": "Blockchain √© tipo aquele grupo do WhatsApp onde todo mundo v√™ a mesma mensagem e ningu√©m pode apagar o que j√° foi enviado ‚Äî todo mundo confia porque n√£o d√° pra mudar o que t√° l√°."
    },
    {
      "titulo": "Livro de Assinaturas P√∫blico",
      "descricao": "Imagina um di√°rio gigante que v√°rias pessoas escrevem juntas, mas s√≥ adicionam p√°ginas novas e ningu√©m pode rasgar ou trocar as antigas. Esse di√°rio √© o blockchain: super seguro e transparente!"
    },
    {
      "titulo": "Viral Imposs√≠vel de Falsificar",
      "descricao": "Pensa no blockchain como um TikTok viral que todo mundo copia certinho, ent√£o n√£o tem como inventar uma vers√£o falsa porque todo mundo tem a original guardada."
    }
  ] 
} 
\`\`\``

    const userPrompt = `Conceito a explicar: ${concept}\nP√∫blico-alvo: ${audience}`

    console.log("[DEBUG] Gerando analogias com o modelo:", model)
    console.log("[DEBUG] System prompt:", systemPrompt)
    console.log("[DEBUG] User prompt:", userPrompt)

    try {
      // Checar acesso (plano/cr√©ditos/fair use) antes de gerar
      const supabaseAccess = await createClient()
      const { data: { user: accessUser } } = await supabaseAccess.auth.getUser()

      let usageInfo: { used: number; limit: number; remaining: number } | null = null
      let canGenerate = true
      let denyReason = "ok"

      if (accessUser?.id) {
        const access = await checkUserAccess(accessUser.id)
        canGenerate = access.canGenerate
        denyReason = access.reason
        usageInfo = {
          used: access.generationsUsed,
          limit: access.generationsLimit,
          remaining: Math.max((access.generationsLimit || 0) - (access.generationsUsed || 0), 0),
        }
      } else {
        const anonId = getAnonymousId()
        const accessAnon = await checkAnonymousAccess(anonId)
        canGenerate = accessAnon.canGenerate
        denyReason = accessAnon.reason
        usageInfo = {
          used: accessAnon.generationsUsed,
          limit: accessAnon.generationsLimit,
          remaining: Math.max((accessAnon.generationsLimit || 0) - (accessAnon.generationsUsed || 0), 0),
        }
      }

      if (!canGenerate) {
        const upgradeMessage = denyReason === "fair_use_limit"
          ? "Voc√™ atingiu o limite de fair use deste m√™s."
          : denyReason === "no_credits"
            ? "Voc√™ n√£o possui cr√©ditos dispon√≠veis."
            : denyReason === "credits_expired"
              ? "Seus cr√©ditos expiraram."
              : denyReason === "limit_reached"
                ? "Voc√™ atingiu seu limite atual."
                : denyReason === "anonymous_limit_reached"
                  ? "Voc√™ atingiu o limite de uso an√¥nimo."
                  : "Limite atingido. Considere fazer upgrade."

        return Response.json({
          error: "Rate limit",
          message: upgradeMessage,
          title: "Limite atingido",
          buttonText: "Fazer upgrade",
          buttonLink: "/assinatura",
          usage: usageInfo || { used: 0, limit: 0, remaining: 0 },
        }, { status: 403 })
      }

      // Gera o texto com o modelo selecionado
      const response = await generateText(
        [
          {
            role: 'system',
            content: systemPrompt,
          },
          {
            role: 'user',
            content: userPrompt,
          },
        ],
        model
      )

      console.log('[DEBUG] Response from AI:', response.substring(0, 200) + '...')

      // Analogias de fallback para caso de erro
      const fallbackAnalogies = [
        {
          title: "Analogia Simples",
          description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
        },
        {
          title: "Analogia Alternativa",
          description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
        },
        {
          title: "Analogia Pr√°tica",
          description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
        }
      ]
      
      // Tenta extrair o JSON da resposta
      let analogies = fallbackAnalogies
      
      try {
        // Tenta encontrar um objeto JSON na resposta usando regex
        const jsonMatch = response.match(/\{[\s\S]*\}/)
        if (jsonMatch) {
          const jsonStr = jsonMatch[0]
          console.log('[DEBUG] JSON encontrado na resposta:', jsonStr.substring(0, 200) + '...')
          
          const parsed = JSON.parse(jsonStr)
          
          if (parsed.analogias && Array.isArray(parsed.analogias)) {
            analogies = parsed.analogias
          } else if (parsed.analogies && Array.isArray(parsed.analogies)) {
            analogies = parsed.analogies
          } else if (Array.isArray(parsed)) {
            analogies = parsed
          }
        }
      } catch (parseError) {
        console.error('[DEBUG] Error parsing AI response:', parseError)
      }

      // Normaliza para objetos { title, description } com tratamento de strings vazias
      const normalized = analogies.map((item: any, idx: number) => {
        if (typeof item === 'string') {
          const desc = item.trim()
          return { title: `Analogia ${idx + 1}`, description: desc || 'Descri√ß√£o n√£o dispon√≠vel.' }
        }
        if (item && typeof item === 'object') {
          const rawDescription =
            item.description ||
            item.descricao ||
            item["descri√ß√£o"] ||
            item.explicacao ||
            item["explica√ß√£o"] ||
            item.text ||
            item.analogy ||
            item.conteudo ||
            item.content ||
            ''

          const rawTitle =
            item.title ||
            item.titulo ||
            item["t√≠tulo"] ||
            ''

          const title = typeof rawTitle === 'string' ? rawTitle.trim() : ''
          const description = typeof rawDescription === 'string' ? rawDescription.trim() : ''

          return {
            title: title || `Analogia ${idx + 1}`,
            description: description || 'Descri√ß√£o n√£o dispon√≠vel.'
          }
        }
        const str = String(item).trim()
        return { title: `Analogia ${idx + 1}`, description: str || 'Descri√ß√£o n√£o dispon√≠vel.' }
      })

      console.log('[DEBUG] Analogias normalizadas:', normalized)

      // Registrar gera√ß√£o e consumir cr√©dito (se aplic√°vel)
      let loggedUserId = null;
      try {
        const supabaseLog = await createClient()
        const { data: { user: logUser } } = await supabaseLog.auth.getUser()
        const anonIdFinal = getAnonymousId()
        
        loggedUserId = logUser?.id || null;
        
        // Inserir diretamente na tabela generations para garantir o registro
        const { error: generationError } = await supabaseLog.from("generations").insert({
          user_id: loggedUserId,
          anonymous_id: anonIdFinal,
          concept,
          audience,
          created_at: new Date().toISOString()
        })
        
        if (generationError) {
          console.error("[DEBUG] Erro ao inserir na tabela generations:", generationError)
          // Tenta o m√©todo alternativo se falhar
          await trackGeneration(loggedUserId, anonIdFinal, concept, audience)
        } else {
          console.log("[DEBUG] Gera√ß√£o registrada com sucesso na tabela generations")
        }

        if (loggedUserId) {
          // Usar a nova fun√ß√£o que combina incremento de contador e consumo de cr√©dito
          try {
            const { data: usageResult, error: usageError } = await supabaseLog.rpc("increment_user_usage", { user_id: loggedUserId })
            
            if (usageError) {
              console.error("[DEBUG] Erro ao atualizar uso e cr√©ditos:", usageError)
              
              // Fallback: tenta os m√©todos antigos separadamente
              await consumeCredit(loggedUserId)
              
              const { error: incrementError } = await supabaseLog.rpc("increment_analogy_count", { user_id_param: loggedUserId })
              if (incrementError) {
                console.error("[DEBUG] Erro ao incrementar contador de analogias:", incrementError)
                
                // √öltimo recurso: atualiza diretamente a tabela user_stats
                const { data: statsData, error: statsError } = await supabaseLog
                  .from('user_stats')
                  .select('total_analogies')
                  .eq('user_id', loggedUserId)
                  .single()
                  
                if (!statsError && statsData) {
                  const newTotal = (statsData.total_analogies || 0) + 1
                  await supabaseLog
                    .from('user_stats')
                    .update({ 
                      total_analogies: newTotal,
                      last_activity_date: new Date().toISOString().split('T')[0],
                      updated_at: new Date().toISOString()
                    })
                    .eq('user_id', loggedUserId)
                  console.log("[DEBUG] Contador de analogias atualizado diretamente:", newTotal)
                }
              }
            } else {
              console.log("[DEBUG] Uso e cr√©ditos atualizados com sucesso")
            }
          } catch (updateError) {
            console.error("[DEBUG] Erro cr√≠tico ao atualizar uso e cr√©ditos:", updateError)
          }
        }
      } catch (trackErr) {
        console.error('[DEBUG] Falha ao registrar uso/consumir cr√©dito:', trackErr)
      }

      // Recalcula o uso atualizado ap√≥s registrar a gera√ß√£o
      try {
        const supabaseFinal = await createClient()
        const { data: { user: finalUser } } = await supabaseFinal.auth.getUser()
        let finalUsage: { used: number; limit: number; remaining: number } | null = null

        if (finalUser?.id || loggedUserId) {
          const userId = finalUser?.id || loggedUserId;
          
          // Importante: Primeiro registra a gera√ß√£o no banco de dados
          await supabaseFinal.rpc('increment_user_usage', { user_id: userId })
          console.log('[DEBUG] Incremento direto do contador para usu√°rio logado:', userId)
          
          // Depois busca os dados atualizados
          const access = await checkUserAccess(userId)
          
          const limitVal = access.generationsLimit || (usageInfo?.limit || 0)
          finalUsage = {
            used: access.generationsUsed,
            limit: limitVal,
            remaining: Math.max(limitVal - access.generationsUsed, 0),
          }
        } else {
          const anonId = getAnonymousId()
          const accessAnon = await checkAnonymousAccess(anonId)
          
          // Verifica se h√° um cookie de uso para usu√°rios an√¥nimos
          const cookieHeader = request.headers.get('cookie') || ''
          const cookies = cookieHeader.split(';').reduce((acc, cookie) => {
            const [key, value] = cookie.trim().split('=')
            if (key) acc[key] = value
            return acc
          }, {} as Record<string, string>)
          
          const usedFromCookie = cookies['anonymous_usage_used'] ? parseInt(cookies['anonymous_usage_used'], 10) : null
          
          // Incrementa +1 imediatamente ap√≥s registrar a gera√ß√£o para refletir o uso atual
          const baseUsed = usedFromCookie !== null ? 
            usedFromCookie : 
            Math.max(accessAnon.generationsUsed || 0, (usageInfo?.used || 0))
          const nextUsed = baseUsed + 1
          const limitVal = accessAnon.generationsLimit || (usageInfo?.limit || 9)
          finalUsage = {
            used: nextUsed,
            limit: limitVal,
            remaining: Math.max(limitVal - nextUsed, 0),
          }
        }

        return Response.json({ analogies: normalized, usage: finalUsage })
      } catch (usageErr) {
        console.error('[DEBUG] Falha ao recalcular uso ap√≥s gera√ß√£o:', usageErr)
        // Mesmo com falha no uso, retorna as analogias
        return Response.json({ analogies: normalized })
      }
    } catch (error) {
      console.error('[DEBUG] Error in generate-analogies:', error)
      console.error("[DEBUG] Stack trace:", error.stack)
      
      // Tenta registrar a gera√ß√£o mesmo em caso de erro
      try {
        const supabaseTrackErr = await createClient()
        const { data: { user: trackErrUser } } = await supabaseTrackErr.auth.getUser()
        const anonIdTrack = getAnonymousId()
        await trackGeneration(trackErrUser?.id || null, anonIdTrack, concept || 'N/A', audience || 'N/A')
      } catch (logErr) {
        console.error('[DEBUG] Falha ao registrar gera√ß√£o no fallback de erro:', logErr)
      }

      // Retorna analogias de fallback em caso de erro, incluindo usage se poss√≠vel
      try {
        const supabaseErr = await createClient()
        const { data: { user: errUser } } = await supabaseErr.auth.getUser()
        let errUsage: { used: number; limit: number; remaining: number } | null = null

        if (errUser?.id) {
          const access = await checkUserAccess(errUser.id)
          errUsage = {
            used: access.generationsUsed,
            limit: access.generationsLimit,
            remaining: Math.max((access.generationsLimit || 0) - (access.generationsUsed || 0), 0),
          }
        } else {
          const anonId = getAnonymousId()
          const accessAnon = await checkAnonymousAccess(anonId)
          // Incrementa +1 imediatamente ap√≥s registrar a gera√ß√£o para refletir o uso atual
          const nextUsed = (accessAnon.generationsUsed || 0) + 1
          const limitVal = accessAnon.generationsLimit || 9
          errUsage = {
            used: nextUsed,
            limit: limitVal,
            remaining: Math.max(limitVal - nextUsed, 0),
          }
        }

        return Response.json({ 
          analogies: [
            {
              title: "Analogia de Conting√™ncia 1",
              description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
            },
            {
              title: "Analogia de Conting√™ncia 2",
              description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
            },
            {
              title: "Analogia de Conting√™ncia 3",
              description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
            }
          ],
          usage: errUsage
        })
      } catch (usageInErr) {
        console.error('[DEBUG] Falha ao calcular usage no fallback de erro:', usageInErr)
        return Response.json({ 
          analogies: [
            {
              title: "Analogia de Conting√™ncia 1",
              description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
            },
            {
              title: "Analogia de Conting√™ncia 2",
              description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
            },
            {
              title: "Analogia de Conting√™ncia 3",
              description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
            }
          ]
        })
      }
    }
  } catch (error) {
    console.error('[DEBUG] Error in generate-analogies outer try-catch:', error)
    console.error("[DEBUG] Stack trace:", error.stack)
    
    // Tenta registrar a gera√ß√£o mesmo sem acesso √†s vari√°veis locais
    try {
      const supabaseOuterTrack = await createClient()
      const { data: { user: outerTrackUser } } = await supabaseOuterTrack.auth.getUser()
      const anonIdOuterTrack = getAnonymousId()
      await trackGeneration(outerTrackUser?.id || null, anonIdOuterTrack, 'N/A', 'N/A')
    } catch (outerLogErr) {
      console.error('[DEBUG] Falha ao registrar gera√ß√£o no outer fallback de erro:', outerLogErr)
    }

    // Retorna analogias de fallback em caso de erro, incluindo usage se poss√≠vel
    try {
      const supabaseOuter = await createClient()
      const { data: { user: outerUser } } = await supabaseOuter.auth.getUser()
      let outerUsage: { used: number; limit: number; remaining: number } | null = null

      if (outerUser?.id) {
        const access = await checkUserAccess(outerUser.id)
        outerUsage = {
          used: access.generationsUsed,
          limit: access.generationsLimit,
          remaining: Math.max((access.generationsLimit || 0) - (access.generationsUsed || 0), 0),
        }
      } else {
        const anonId = getAnonymousId()
        const accessAnon = await checkAnonymousAccess(anonId)
        // Incrementa +1 imediatamente ap√≥s registrar a gera√ß√£o para refletir o uso atual
        const nextUsed = (accessAnon.generationsUsed || 0) + 1
        const limitVal = accessAnon.generationsLimit || 9
        outerUsage = {
          used: nextUsed,
          limit: limitVal,
          remaining: Math.max(limitVal - nextUsed, 0),
        }
      }

      return Response.json({ 
        analogies: [
          {
            title: "Analogia de Emerg√™ncia 1",
            description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
          },
          {
            title: "Analogia de Emerg√™ncia 2",
            description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
          },
          {
            title: "Analogia de Emerg√™ncia 3",
            description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
          }
        ],
        usage: outerUsage
      })
    } catch (outerUsageErr) {
      console.error('[DEBUG] Falha ao calcular usage no outer fallback de erro:', outerUsageErr)
      return Response.json({ 
        analogies: [
          {
            title: "Analogia de Emerg√™ncia 1",
            description: "Pense no conceito como um quebra-cabe√ßa onde cada pe√ßa representa um aspecto diferente que, quando unidas, formam uma imagem completa."
          },
          {
            title: "Analogia de Emerg√™ncia 2",
            description: "O conceito √© como uma receita de bolo, onde cada ingrediente tem seu papel e, quando combinados corretamente, criam algo novo e valioso."
          },
          {
            title: "Analogia de Emerg√™ncia 3",
            description: "Imagine o conceito como uma viagem, onde cada etapa te leva mais perto do destino final, com diferentes paisagens e experi√™ncias ao longo do caminho."
          }
        ]
      })
    }
  }
}
